{"version":3,"file":"static/js/48.eeded22c.chunk.js","mappings":"gNACA,EAA0B,yBAA1B,EAA2D,uB,+CCQrDA,GAAcC,EAAAA,EAAAA,IAAiB,IAC/BC,GAAeC,EAAAA,EAAAA,IAAiB,KAuBtC,GAJyBC,EAAAA,EAAAA,GAAuC,CAC9DC,KAAM,WADiBD,EAfwB,SAAH,GAA0B,IAApBE,EAAY,EAAZA,aAClD,OACE,kBAAMC,SAAUD,EAAa,WAC3B,SAACE,EAAA,EAAK,CACJC,UAAWC,EAAAA,EACXC,KAAK,cACLC,SAAU,CAACZ,EAAaE,MAE1B,0BACE,6CAIR,IC1BA,EAAuB,mBAAvB,EAAsD,wBAAtD,EAAqF,mB,UCkCrF,EAtBsC,SAAH,GAA6C,IAAvCW,EAAE,EAAFA,GAAIC,EAAK,EAALA,MAAOC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAK/D,OACE,iBAAKC,UAAWC,EAAO,WACrB,gBAAKC,IAAKC,EAAWC,IAAI,uBACzB,iBAAKJ,UAAWC,EAAO,cAAGH,EAAI,QAC9B,0BACE,kBAAME,UAAWC,EAAY,WAC3B,mBAAQI,SAAUR,EAAOS,QAVX,WACpBP,EAAQJ,EAAIC,EACd,EAQwD,mBAGhD,kBAAM,IAAEA,EAAK,8BAGjB,oBAGN,ECEA,EAvByC,SAAH,GAA6C,IAAvCW,EAAK,EAALA,MAAOR,EAAO,EAAPA,QAASS,EAAe,EAAfA,gBACtDC,EAAeF,EAAMG,KAAI,SAACC,GAAC,OAC7B,SAAC,EAAI,CACHb,KAAMa,EAAEb,KACRF,MAAOe,EAAEf,MACTC,MAAOc,EAAEd,MAETF,GAAIgB,EAAEC,OACNb,QAASA,GAFJY,EAAEC,OAGP,IAKJ,OACE,iBAAKZ,UAAWa,EAAc,WAC5B,sCACA,SAAC,EAAW,CAACxB,SALF,SAACyB,GAAqC,OAAKN,EAAgBM,EAAU,KAMhF,gBAAKd,UAAWa,EAAY,SAAEJ,MAGpC,E,oBCvBQV,EAAYgB,EAAAA,GAAAA,QAgBpB,GAAeC,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAPoB,SAACC,GACrB,MAAO,CACLX,MAAOW,EAAMC,YAAYZ,MAE7B,GAKI,CAAEC,gBAAAA,EAAAA,GAAiBT,QAAAA,IAHvB,CAKEqB,GC9BF,GAAiB,E,mBCAjB,GAAgB,YAAc,wCAAwC,SAAW,qCAAqC,OAAS,mCAAmC,OAAS,oCCkDrKC,EAAmC,SAAH,GAA4B,IAAtBC,EAAQ,EAARA,SAAUC,EAAI,EAAJA,KACpD,OAAKA,GAGH,4BACE,0BAAOD,IAAgB,IAAE,KACzB,cAAGE,KAAMD,EAAME,OAAO,SAASC,IAAI,aAAY,UAC7C,0BAAOH,SANK,IAUpB,EAEA,EAtD6C,SAAH,GAInC,IAHLI,EAAO,EAAPA,QACAC,EAAc,EAAdA,eACAC,EAAO,EAAPA,QAEIC,EAAeC,OAAOC,KAAKL,EAAQM,UACpCvB,KAAI,SAACwB,GACJ,OAAKP,EAAQM,SAASC,IAEpB,SAACb,EAAO,CAENC,SAAUY,EACVX,KAAMI,EAAQM,SAASC,IAFlBA,GAHgD,IAQ3D,IACCC,QAAO,SAACC,GAAC,OAAW,OAANA,CAAU,IAE3B,OACE,iCACE,gBAAKpC,UAAWa,EAAAA,QAAc,SAAEc,EAAQU,WACxC,uCACA,iBAAKrC,UAAWa,EAAAA,eAAqB,wBACvBc,EAAQW,eAAiB,MAAQ,SAE/C,gBAAKtC,UAAWa,EAAAA,gBAAsB,SACnCc,EAAQY,6BAEX,iBAAKvC,UAAWa,EAAAA,SAAe,uBAClBiB,EAAaU,OAASV,EAAe,iBAEjDD,IAAW,mBAAQvB,QAASsB,EAAe,oBAGlD,ECJA,EA7BgD,SAAH,GAKtC,IAJLa,EAAQ,EAARA,SACAC,EAAgB,EAAhBA,iBACAb,EAAO,EAAPA,QACAc,EAAU,EAAVA,WAQA,OACE,iCACE,gBAAK3C,UAAWa,EAAAA,SAAe,SAAE4B,KACjC,gBACEzC,UAAWa,EAAAA,OACXX,IAAKwC,GAAsCE,EAC3CxC,IAAI,gBAELyB,IACC,0BACE,kBAAOgB,KAAK,OAAOC,SAhBgC,SAACC,GAAO,IAAD,EAC9C,QAAlB,EAAIA,EAAEtB,OAAOuB,aAAK,OAAd,EAAgBR,QAClBG,EAAWI,EAAEtB,OAAOuB,MAAM,GAE9B,QAiBF,ECUA,EA5CmB,SAAH,GAA+C,IAAzCC,EAAM,EAANA,OAAQC,EAAgB,EAAhBA,iBAAkBrB,EAAO,EAAPA,QAC9C,GAAoCsB,EAAAA,EAAAA,UAASF,GAAO,eAA/CG,EAAgB,KAAEC,EAAS,KAChC,GAA8BF,EAAAA,EAAAA,WAAS,GAAM,eAAxCG,EAAQ,KAAEC,EAAW,MAE1BC,EAAAA,EAAAA,YAAU,WACRH,EAAUJ,EACZ,GAAG,CAACA,IAEJ,IAIIrB,EAAiB,WACfC,IACEyB,GACFC,GAAY,GACZL,EAAiBE,IAEjBG,GAAY,GAGlB,EAEA,OACE,iBAAKvD,UAAWC,EAAAA,OAAS,WACrBqD,IACA,gBAAKhD,QAASsB,EAAe,UAC3B,0BAAOqB,GAAU,aAGpBK,IACC,0BACE,kBACEG,WAAW,EACXX,SA1BW,SAACC,GACpBM,EAAUN,EAAEW,cAAcC,MAC5B,EAyBUC,OAAQhC,EACR+B,MAAOP,QAMnB,E,UC7CA,GAAgB,OAAS,4BAA4B,eAAiB,oCAAoC,QAAU,6BAA6B,QAAU,6BAA6B,UAAY,gCC6GpM,GAL+BlE,EAAAA,EAAAA,GAAyC,CACtEC,KAAM,gBACN0E,oBAAoB,GAFS3E,EAnFsB,SAAC4E,GACpD,IAAMC,GAAc9E,EAAAA,EAAAA,IAAiB,IAC/B+E,GAAajF,EAAAA,EAAAA,IAAiB,GAChCkF,EAAgBlC,OAAOC,KAAK8B,EAAMnC,QAAQM,UAC3CvB,KAAI,SAACwB,GACJ,OACE,gBAAelC,UAAWa,EAAAA,QAAc,UACtC,8BACE,iBAAMb,UAAWa,EAAAA,UAAgB,SAAEqB,KAClCgC,EAAAA,EAAAA,GAAW,YAAD,OAAahC,GAAO1C,EAAAA,EAAW0C,EAAK,QAHzCA,EAOd,IACCC,QAAO,SAACC,GAAC,OAAW,OAANA,CAAU,IAE3B,OACE,kBAAM/C,SAAUyE,EAAM1E,aAAa,WACjC,gBAAKY,UAAWa,EAAAA,QAAc,UAC5B,8BACE,iBAAMb,UAAWa,EAAAA,UAAgB,wBAChCqD,EAAAA,EAAAA,GACC,WACA1E,EAAAA,OACA2E,EACA,CAACC,EAAAA,GAAUL,EAAaC,UAI9B,gBAAKhE,UAAWa,EAAAA,QAAc,UAC5B,8BACE,iBAAMb,UAAWa,EAAAA,UAAgB,uBAChCqD,EAAAA,EAAAA,GACC,UACAG,EAAAA,OACAF,EACA,CAACC,EAAAA,WAIP,gBAAKpE,UAAWa,EAAAA,QAAc,UAC5B,mBAAOb,UAAWa,EAAAA,eAAqB,WACrC,iBAAMb,UAAWa,EAAAA,UAAgB,gCAChCqD,EAAAA,EAAAA,GACC,iBACA1E,EAAAA,OACA2E,EACA,GACA,kBAIN,gBAAKnE,UAAWa,EAAAA,QAAc,UAC5B,8BACE,iBAAMb,UAAWa,EAAAA,UAAgB,8BACjC,mBACCqD,EAAAA,EAAAA,GACC,4BACAG,EAAAA,OACAF,EACA,CAACC,EAAAA,WAIP,gBAAKpE,UAAWa,EAAAA,SAAe,SAAEoD,KACjC,mBACEjE,UAAWa,EAAAA,QACXP,QAAUwD,EAAMQ,MAA+B,WAAO,EAA9BR,EAAMlC,eAA0B,oBAMhE,ICzCA,EA9CoC,SAACkC,GACnC,OAAgCX,EAAAA,EAAAA,WAAS,GAAM,eAAxCG,EAAQ,KAAEC,EAAW,KAEtB3B,EAAiB,WACP2B,GAAVD,EAEN,EAQA,OACE,iBAAKtD,UAAWC,EAAAA,YAAc,WAC5B,SAAC,EAAW,CACVwC,SAAUqB,EAAMnC,QAAQc,SACxBC,iBAAkBoB,EAAMnC,QAAQ4C,OAAOC,MACvC3C,QAASiC,EAAMjC,QACfc,WAAYmB,EAAMnB,cAGpB,SAAC,EAAU,CACTM,OAAQa,EAAMb,OACdC,iBAAkBY,EAAMZ,iBACxBrB,QAASiC,EAAMjC,UAGhByB,GACC,SAAC,EAAa,CACZmB,cAAeX,EAAMnC,QACrBtC,SAxBS,SAACqF,GAChBZ,EACGa,mBAAmBD,EAAUZ,EAAMc,QAAS,MAC5CC,MAAK,kBAAMjD,GAAgB,GAChC,EAqBQD,QAASmC,EAAMnC,WAGjB,SAAC,EAAS,CACRA,QAASmC,EAAMnC,QACfC,eAAgBA,EAChBC,QAASiC,EAAMjC,YAKzB,ECTA,EA5BiD,SAAH,GAQvC,IAPLF,EAAO,EAAPA,QACAuB,EAAgB,EAAhBA,iBACAD,EAAM,EAANA,OACApB,EAAO,EAAPA,QACAc,EAAU,EAAVA,WACAgC,EAAkB,EAAlBA,mBACAC,EAAO,EAAPA,QAEA,OAAKjD,GAKH,0BACE,SAAC,EAA2B,CAC1BuB,iBAAkBA,EAClBvB,QAASA,EACTsB,OAAQA,EACRpB,QAASA,EACTc,WAAYA,EACZgC,mBAAoBA,EACpBC,QAASA,OAZN,SAACE,EAAA,EAAS,GAgBrB,ECGA,EAzBwC,SAAH,GAQ9B,IAPLnD,EAAO,EAAPA,QACAsB,EAAM,EAANA,OACAC,EAAgB,EAAhBA,iBACArB,EAAO,EAAPA,QACAc,EAAU,EAAVA,WACAgC,EAAkB,EAAlBA,mBACAI,EAAW,EAAXA,YAEA,OACE,iBAAK/E,UAAWa,EAAAA,YAAkB,WAChC,SAAC,EAAW,CACVc,QAASA,EACTsB,OAAQA,EACRC,iBAAkBA,EAClBrB,QAASA,EACTc,WAAYA,EACZgC,mBAAoBA,EACpBC,QAASG,KAEX,SAACC,EAAgB,MAGvB,E,8BCpBMC,EAAgB,qJA4BlB,OA5BkB,oCACpBC,cAAgB,WACd,EAAKpB,MAAMqB,eAAe,EAAKrB,MAAMsB,OAAOC,OAAOC,QACnD,EAAKxB,MAAMyB,cAAc,EAAKzB,MAAMsB,OAAOC,OAAOC,OACpD,EAAE,EAEFE,kBAAoB,WAClB,EAAKN,eACP,EAAE,EAEFO,mBAAqB,SAACC,GAChBA,EAAUN,OAAOC,OAAOC,SAAW,EAAKxB,MAAMsB,OAAOC,OAAOC,QAC9D,EAAKJ,eAET,EAAE,EAEFS,OAAS,WACP,OACE,SAAC,EAAO,CACNZ,YAAa,EAAKjB,MAAMiB,YACxBJ,mBAAoB,EAAKb,MAAMa,mBAC/B1B,OAAQ,EAAKa,MAAMb,OACnBtB,QAAS,EAAKmC,MAAMnC,QACpBuB,iBAAkB,EAAKY,MAAMZ,iBAC7BrB,SAAU,EAAKiC,MAAMsB,OAAOC,OAAOC,OACnC3C,WAAY,EAAKmB,MAAMnB,YAG7B,EAAC,mBA5BmB,CAASiD,EAAAA,WAuC/B,GAAe5E,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAToB,SAACC,GACrB,MAAO,CACLS,SAASkE,EAAAA,EAAAA,IAAW3E,GACpB6D,aAAae,EAAAA,EAAAA,IAAe5E,GAC5B+B,QAAQ8C,EAAAA,EAAAA,IAAiB7E,GAE7B,GAG2B,CACvBiE,eAAAA,EAAAA,GACAI,cAAAA,EAAAA,GACArC,iBAAAA,EAAAA,GACAP,WAAAA,EAAAA,GACAgC,mBAAAA,EAAAA,KAEFqB,EAAAA,EACAC,EAAAA,EATF,CAUEhB,E","sources":["webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPostsForm/MyPostsForm.tsx","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.module.css","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileDescription/ProfileDescription.module.css?81bc","components/Profile/ProfileInfo/ProfileDescription/AboutUser/AboutUser.tsx","components/Profile/ProfileInfo/ProfileDescription/UserPreview/UserPreview.tsx","components/Profile/ProfileInfo/ProfileDescription/UserStatus/UserStatus.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileDescription/AboutUserForm.tsx","components/Profile/ProfileInfo/ProfileDescription/ProfileDescriptionWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"myPosts\":\"MyPosts_myPosts__RjhRC\",\"posts\":\"MyPosts_posts__QhSpD\"};","import * as React from \"react\";\r\nimport { reduxForm, Field, InjectedFormProps } from \"redux-form\";\r\nimport { addPostFromFormFormDataType } from \"../../../../redux/profileReducer\";\r\nimport {\r\n  maxLengthCreator,\r\n  minLengthCreator,\r\n} from \"../../../../utils/validators\";\r\nimport { FormInput } from \"../../../common/forms/FormControls\";\r\n\r\nconst minLength10 = minLengthCreator(10);\r\nconst maxLength300 = maxLengthCreator(300);\r\n\r\ntype TMyPostsFormProps = InjectedFormProps<addPostFromFormFormDataType>;\r\n\r\nconst MyPostsForm: React.FC<TMyPostsFormProps> = ({ handleSubmit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field\r\n        component={FormInput}\r\n        name=\"newPostText\"\r\n        validate={[minLength10, maxLength300]}\r\n      />\r\n      <div>\r\n        <button>Add Post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst myPostsReduxForm = reduxForm<addPostFromFormFormDataType>({\r\n  form: \"myPosts\",\r\n})(MyPostsForm);\r\n\r\nexport default myPostsReduxForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__bggH6\",\"likeBlock\":\"Post_likeBlock__hqtqM\",\"text\":\"Post_text__8R0Y1\"};","import s from \"./Post.module.css\";\r\nimport userPhoto from \"../../../../assets/img/defaultUserAv.jpg\";\r\nimport React from \"react\";\r\n\r\ntype PostPropsType = {\r\n  id: number;\r\n  likes: number;\r\n  text: string;\r\n  liked: boolean;\r\n\r\n  addLike: (postId: number, likes: number) => void;\r\n};\r\n\r\nconst Post: React.FC<PostPropsType> = ({ id, likes, liked, text, addLike }) => {\r\n  const addLikeToPost = () => {\r\n    addLike(id, likes);\r\n  };\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src={userPhoto} alt=\"start user avatar\" />\r\n      <div className={s.text}> {text} </div>\r\n      <div>\r\n        <span className={s.likeBlock}>\r\n          <button disabled={liked} onClick={addLikeToPost}>\r\n            like\r\n          </button>\r\n          <br />({likes} peoples like this! )\r\n        </span>\r\n      </div>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { addPostFromFormFormDataType, PostType } from \"../../../redux/profileReducer\";\r\nimport style from \"./MyPosts.module.css\";\r\nimport MyPostsForm from \"./MyPostsForm/MyPostsForm\";\r\nimport Post from \"./Post/Post\";\r\n\r\ntype TMyPostsProps = {\r\n  posts: Array<PostType>;\r\n  addLike: (id: number, likes: number) => void;\r\n  addPostFromForm: (formData: addPostFromFormFormDataType) => void;\r\n}\r\n\r\nconst MyPosts: React.FC<TMyPostsProps> = ({ posts, addLike, addPostFromForm }) => {\r\n  let postElements = posts.map((p) => (\r\n    <Post\r\n      text={p.text}\r\n      likes={p.likes}\r\n      liked={p.liked}\r\n      key={p.postId}\r\n      id={p.postId}\r\n      addLike={addLike}\r\n    />\r\n  ));\r\n\r\n  let onSubmit = (formData: addPostFromFormFormDataType) => addPostFromForm(formData);\r\n\r\n  return (\r\n    <div className={style.myPosts}>\r\n      <h3>My Posts</h3>\r\n      <MyPostsForm onSubmit={onSubmit} />\r\n      <div className={style.posts}>{postElements}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPosts;\r\n","import MyPosts from \"./MyPosts\";\r\nimport {\r\n  addPostFromForm,\r\n  actions,\r\n  PostType,\r\n  addPostFromFormFormDataType,\r\n} from \"../../../redux/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { rootStateType } from \"../../../redux/reduxStore\";\r\nconst { addLike } = actions;\r\n\r\ntype TMapStateToProps = {\r\n  posts: Array<PostType>;\r\n};\r\ntype TMapDispatchToProps = {\r\n  addLike: (id: number, likes: number) => void;\r\n  addPostFromForm: (formData: addPostFromFormFormDataType) => void;\r\n};\r\n\r\nlet mapStateToProps = (state: rootStateType): TMapStateToProps => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect<TMapStateToProps, TMapDispatchToProps, {}, rootStateType>(\r\n    mapStateToProps,\r\n    { addPostFromForm, addLike }\r\n  )\r\n)(MyPosts);\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileDescription_description__c54HU\",\"fullName\":\"ProfileDescription_fullName__CJFbG\",\"avatar\":\"ProfileDescription_avatar__+sbzZ\",\"status\":\"ProfileDescription_status__eX8Qd\"};","import * as React from \"react\";\r\nimport { ContactsType, ProfileType } from \"../../../../../types/types\";\r\nimport style from \"../ProfileDescription.module.css\";\r\n\r\ntype TAboutUserProps = {\r\n  profile: ProfileType;\r\n  toggleEditMode: () => void;\r\n  isOwner: boolean;\r\n};\r\n\r\nconst AboutUser: React.FC<TAboutUserProps> = ({\r\n  profile,\r\n  toggleEditMode,\r\n  isOwner,\r\n}) => {\r\n  let contactLinks = Object.keys(profile.contacts)\r\n    .map((key) => {\r\n      if (!profile.contacts[key as keyof ContactsType]) return null;\r\n      return (\r\n        <Contact\r\n          key={key}\r\n          linkName={key}\r\n          link={profile.contacts[key as keyof ContactsType]}\r\n        />\r\n      );\r\n    })\r\n    .filter((c) => c !== null);\r\n\r\n  return (\r\n    <>\r\n      <div className={style.aboutMe}>{profile.aboutMe}</div>\r\n      <h5>About Job</h5>\r\n      <div className={style.lookingForAJob}>\r\n        Need work: {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n      </div>\r\n      <div className={style.workDescription}>\r\n        {profile.lookingForAJobDescription}\r\n      </div>\r\n      <div className={style.contacts}>\r\n        contacts: {contactLinks.length ? contactLinks : \"no contacts\"}\r\n      </div>\r\n      {isOwner && <button onClick={toggleEditMode}>edit</button>}\r\n    </>\r\n  );\r\n};\r\n\r\ntype TContactProps = {\r\n  linkName: string;\r\n  link: string | null;\r\n};\r\n\r\nconst Contact: React.FC<TContactProps> = ({ linkName, link }) => {\r\n  if (!link) return null;\r\n\r\n  return (\r\n    <div>\r\n      <span>{linkName}</span>:{\" \"}\r\n      <a href={link} target=\"_blank\" rel=\"noreferrer\">\r\n        <span>{link}</span>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutUser;\r\n","import React, { ChangeEventHandler } from \"react\";\r\nimport userDefaultPhoto from \"../../../../../assets/img/defaultUserAv.jpg\";\r\nimport style from \"../ProfileDescription.module.css\";\r\n\r\ntype UserPreviewProps = {\r\n  fullName: string;\r\n  userProfilePhoto: string | null;\r\n  isOwner: boolean;\r\n  saveAvatar: (file: File) => void;\r\n};\r\n\r\nconst UserPreview: React.FC<UserPreviewProps> = ({\r\n  fullName,\r\n  userProfilePhoto,\r\n  isOwner,\r\n  saveAvatar,\r\n}) => {\r\n  let onFileSelected: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    if (e.target.files?.length) {\r\n      saveAvatar(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={style.fullName}>{fullName}</div>\r\n      <img\r\n        className={style.avatar}\r\n        src={userProfilePhoto ? userProfilePhoto : userDefaultPhoto}\r\n        alt=\"user avatar\"\r\n      />\r\n      {isOwner && (\r\n        <div>\r\n          <input type=\"file\" onChange={onFileSelected} />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserPreview;\r\n","import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport s from \"../ProfileDescription.module.css\";\r\n\r\nconst UserStatus = ({ status, updateUserStatus, isOwner }) => {\r\n  let [localStateStatus, setStatus] = useState(status);\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setStatus(status);\r\n  }, [status]);\r\n\r\n  let onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  let toggleEditMode = () => {\r\n    if (isOwner) {\r\n      if (editMode) {\r\n        setEditMode(false);\r\n        updateUserStatus(localStateStatus);\r\n      } else {\r\n        setEditMode(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={s.status}>\r\n      {!editMode && (\r\n        <div onClick={toggleEditMode}>\r\n          <span>{status || \"------\"}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onChange={onStatusChange}\r\n            onBlur={toggleEditMode}\r\n            value={localStateStatus}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserStatus\r\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"ProfileInfo_header__tVpgS\",\"LookingForAJob\":\"ProfileInfo_LookingForAJob__5CwD6\",\"saveBtn\":\"ProfileInfo_saveBtn__HyeIj\",\"formInp\":\"ProfileInfo_formInp__d5l3I\",\"labelText\":\"ProfileInfo_labelText__FEMim\"};","import React from \"react\";\r\nimport { reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  minLengthCreator,\r\n  required,\r\n} from \"../../../../utils/validators\";\r\nimport { FormInput, FormTextarea } from \"../../../common/forms/FormControls\";\r\nimport { createForm } from \"../../../common/forms/createForm\";\r\nimport style from \"../ProfileInfo.module.css\";\r\nimport { ContactsType, ProfileType } from \"../../../../types/types\";\r\nimport { SaveProfileDataType } from \"../../../../redux/profileReducer\";\r\n\r\ntype TOwnProps = {\r\n  profile: ProfileType;\r\n  toggleEditMode: () => void;\r\n};\r\n\r\ntype TAboutUserFormProps = InjectedFormProps<TAboutUserFormData, TOwnProps> &\r\n  TOwnProps;\r\ntype SaveProfileDataTypeKeys = keyof SaveProfileDataType;\r\n\r\nconst AboutUserForm: React.FC<TAboutUserFormProps> = (props) => {\r\n  const maxLength20 = maxLengthCreator(20);\r\n  const minLength3 = minLengthCreator(3);\r\n  let contactInputs = Object.keys(props.profile.contacts)\r\n    .map((key) => {\r\n      return (\r\n        <div key={key} className={style.contact}>\r\n          <label>\r\n            <span className={style.labelText}>{key}</span>\r\n            {createForm(`contacts.${key}`, FormInput, key, [])}\r\n          </label>\r\n        </div>\r\n      );\r\n    })\r\n    .filter((c) => c !== null);\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={style.formInp}>\r\n        <label>\r\n          <span className={style.labelText}>User name</span>\r\n          {createForm<SaveProfileDataTypeKeys>(\r\n            \"fullName\",\r\n            FormInput,\r\n            undefined,\r\n            [required, maxLength20, minLength3]\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className={style.formInp}>\r\n        <label>\r\n          <span className={style.labelText}>About me</span>\r\n          {createForm<SaveProfileDataTypeKeys>(\r\n            \"aboutMe\",\r\n            FormTextarea,\r\n            undefined,\r\n            [required]\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className={style.formInp}>\r\n        <label className={style.LookingForAJob}>\r\n          <span className={style.labelText}>Looking for a job</span>\r\n          {createForm<SaveProfileDataTypeKeys>(\r\n            \"lookingForAJob\",\r\n            FormInput,\r\n            undefined,\r\n            [],\r\n            \"checkbox\"\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className={style.formInp}>\r\n        <label>\r\n          <span className={style.labelText}>Job description</span>\r\n          <br />\r\n          {createForm<SaveProfileDataTypeKeys>(\r\n            \"lookingForAJobDescription\",\r\n            FormTextarea,\r\n            undefined,\r\n            [required]\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className={style.contacts}>{contactInputs}</div>\r\n      <button\r\n        className={style.saveBtn}\r\n        onClick={!props.error ? props.toggleEditMode : () => {}}\r\n      >\r\n        save\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\ntype TAboutUserFormData = {\r\n  fullName: string;\r\n  aboutMe: string;\r\n  lookingForAJob: boolean;\r\n  lookingForAJobDescription: string;\r\n  contacts: ContactsType;\r\n};\r\n\r\nconst AboutUserFormReduxForm = reduxForm<TAboutUserFormData, TOwnProps>({\r\n  form: \"aboutUserForm\",\r\n  enableReinitialize: true,\r\n})(AboutUserForm);\r\n\r\nexport default AboutUserFormReduxForm;\r\n","import React from \"react\";\r\nimport s from \"./ProfileDescription.module.css\";\r\nimport AboutUser from \"./AboutUser/AboutUser\";\r\nimport UserPreview from \"./UserPreview/UserPreview\";\r\nimport UserStatus from \"./UserStatus/UserStatus\";\r\nimport { useState } from \"react\";\r\nimport AboutUserForm from \"./AboutUserForm\";\r\n\r\nconst ProfileDescriptionWithHooks = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const toggleEditMode = () => {\r\n    if (editMode) setEditMode(false);\r\n    else setEditMode(true);\r\n  };\r\n\r\n  const onSubmit = (FormData) => {\r\n    props\r\n      .saveChangedProfile(FormData, props.ownerId, null)\r\n      .then(() => toggleEditMode());\r\n  };\r\n\r\n  return (\r\n    <div className={s.description}>\r\n      <UserPreview\r\n        fullName={props.profile.fullName}\r\n        userProfilePhoto={props.profile.photos.large}\r\n        isOwner={props.isOwner}\r\n        saveAvatar={props.saveAvatar}\r\n      />\r\n\r\n      <UserStatus\r\n        status={props.status}\r\n        updateUserStatus={props.updateUserStatus}\r\n        isOwner={props.isOwner}\r\n      />\r\n\r\n      {editMode ? (\r\n        <AboutUserForm\r\n          initialValues={props.profile}\r\n          onSubmit={onSubmit}\r\n          profile={props.profile}\r\n        />\r\n      ) : (\r\n        <AboutUser\r\n          profile={props.profile}\r\n          toggleEditMode={toggleEditMode}\r\n          isOwner={props.isOwner}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileDescriptionWithHooks;\r\n","import { saveChangedProfileFormDataType } from \"../../../redux/profileReducer\";\r\nimport { ProfileType } from \"../../../types/types\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileDescriptionWithHooks from \"./ProfileDescription/ProfileDescriptionWithHooks\";\r\n\r\ntype TProfileInfoProps = {\r\n  profile: ProfileType | null;\r\n  updateUserStatus: (status: string) => void;\r\n  status: string | null;\r\n  isOwner: boolean;\r\n  saveAvatar: (file: File) => void;\r\n  saveChangedProfile: (formData: saveChangedProfileFormDataType) => void;\r\n  ownerId: number | null;\r\n};\r\n\r\nconst ProfileInfo: React.FC<TProfileInfoProps> = ({\r\n  profile,\r\n  updateUserStatus,\r\n  status,\r\n  isOwner,\r\n  saveAvatar,\r\n  saveChangedProfile,\r\n  ownerId,\r\n}) => {\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ProfileDescriptionWithHooks\r\n        updateUserStatus={updateUserStatus}\r\n        profile={profile}\r\n        status={status}\r\n        isOwner={isOwner}\r\n        saveAvatar={saveAvatar}\r\n        saveChangedProfile={saveChangedProfile}\r\n        ownerId={ownerId}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport style from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport * as React from 'react';\r\nimport { ProfileType } from \"../../types/types\";\r\nimport { saveChangedProfileFormDataType } from \"../../redux/profileReducer\";\r\n\r\ntype ProfileProps = {\r\n  profile: ProfileType | null;\r\n  status: string | null;\r\n  isOwner: boolean;\r\n  myProfileId: number | null;\r\n\r\n  saveChangedProfile: (formData: saveChangedProfileFormDataType) => void\r\n  saveAvatar: (file: File) => void;\r\n  updateUserStatus: (status: string) => void;\r\n\r\n}\r\n\r\nconst Profile: React.FC<ProfileProps> = ({\r\n  profile,\r\n  status,\r\n  updateUserStatus,\r\n  isOwner,\r\n  saveAvatar,\r\n  saveChangedProfile,\r\n  myProfileId,\r\n}) => {\r\n  return (\r\n    <div className={style.profilePage}>\r\n      <ProfileInfo\r\n        profile={profile}\r\n        status={status}\r\n        updateUserStatus={updateUserStatus}\r\n        isOwner={isOwner}\r\n        saveAvatar={saveAvatar}\r\n        saveChangedProfile={saveChangedProfile}\r\n        ownerId={myProfileId}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {\r\n  getUserProfile,\r\n  getUserStatus,\r\n  updateUserStatus,\r\n  saveAvatar,\r\n  saveChangedProfile,\r\n  saveChangedProfileFormDataType,\r\n} from \"../../redux/profileReducer\";\r\nimport withRouter, { Router } from \"../../hoc/withRouter\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n  getMyProfileId,\r\n  getProfile,\r\n  getProfileStatus,\r\n} from \"../../redux/selectors\";\r\nimport { ProfileType } from \"../../types/types\";\r\nimport { rootStateType } from \"../../redux/reduxStore\";\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerProps> {\r\n  updateProfile = () => {\r\n    this.props.getUserProfile(this.props.router.params.userId);\r\n    this.props.getUserStatus(this.props.router.params.userId);\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.updateProfile();\r\n  };\r\n\r\n  componentDidUpdate = (prevProps: ProfileContainerProps) => {\r\n    if (prevProps.router.params.userId !== this.props.router.params.userId) {\r\n      this.updateProfile();\r\n    }\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <Profile\r\n        myProfileId={this.props.myProfileId}\r\n        saveChangedProfile={this.props.saveChangedProfile}\r\n        status={this.props.status}\r\n        profile={this.props.profile}\r\n        updateUserStatus={this.props.updateUserStatus}\r\n        isOwner={!this.props.router.params.userId}\r\n        saveAvatar={this.props.saveAvatar}\r\n      />\r\n    );\r\n  };\r\n}\r\n\r\nlet mapStateToProps = (state: rootStateType): MapStateToProps => {\r\n  return {\r\n    profile: getProfile(state),\r\n    myProfileId: getMyProfileId(state),\r\n    status: getProfileStatus(state),\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n    saveAvatar,\r\n    saveChangedProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n\r\ntype MapStateToProps = {\r\n  profile: ProfileType | null;\r\n  myProfileId: number | null;\r\n  status: string | null;\r\n};\r\ntype MapDispatchToProps = {\r\n  updateUserStatus: (status: string) => void;\r\n  saveChangedProfile: (\r\n    formData: saveChangedProfileFormDataType\r\n  ) => void;\r\n  saveAvatar: (file: File) => void;\r\n  getUserStatus: (userId: number) => void;\r\n  getUserProfile: (userId: number | null) => void;\r\n};\r\ntype OwnProps = {\r\n  router: Router<{ userId: number }>;\r\n};\r\ntype ProfileContainerProps = OwnProps & MapStateToProps & MapDispatchToProps;\r\n"],"names":["minLength10","minLengthCreator","maxLength300","maxLengthCreator","reduxForm","form","handleSubmit","onSubmit","Field","component","FormInput","name","validate","id","likes","liked","text","addLike","className","s","src","userPhoto","alt","disabled","onClick","posts","addPostFromForm","postElements","map","p","postId","style","formData","actions","compose","connect","state","profilePage","MyPosts","Contact","linkName","link","href","target","rel","profile","toggleEditMode","isOwner","contactLinks","Object","keys","contacts","key","filter","c","aboutMe","lookingForAJob","lookingForAJobDescription","length","fullName","userProfilePhoto","saveAvatar","userDefaultPhoto","type","onChange","e","files","status","updateUserStatus","useState","localStateStatus","setStatus","editMode","setEditMode","useEffect","autoFocus","currentTarget","value","onBlur","enableReinitialize","props","maxLength20","minLength3","contactInputs","createForm","undefined","required","FormTextarea","error","photos","large","initialValues","FormData","saveChangedProfile","ownerId","then","Preloader","myProfileId","MyPostsContainer","ProfileContainer","updateProfile","getUserProfile","router","params","userId","getUserStatus","componentDidMount","componentDidUpdate","prevProps","render","React","getProfile","getMyProfileId","getProfileStatus","withRouter","withAuthRedirect"],"sourceRoot":""}